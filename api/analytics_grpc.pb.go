// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalyticsSyncClient is the client API for AnalyticsSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsSyncClient interface {
	Sync(ctx context.Context, opts ...grpc.CallOption) (AnalyticsSync_SyncClient, error)
}

type analyticsSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsSyncClient(cc grpc.ClientConnInterface) AnalyticsSyncClient {
	return &analyticsSyncClient{cc}
}

func (c *analyticsSyncClient) Sync(ctx context.Context, opts ...grpc.CallOption) (AnalyticsSync_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnalyticsSync_ServiceDesc.Streams[0], "/AnalyticsSync/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &analyticsSyncSyncClient{stream}
	return x, nil
}

type AnalyticsSync_SyncClient interface {
	Send(*AnalyticsRecords) error
	CloseAndRecv() (*SyncResponse, error)
	grpc.ClientStream
}

type analyticsSyncSyncClient struct {
	grpc.ClientStream
}

func (x *analyticsSyncSyncClient) Send(m *AnalyticsRecords) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analyticsSyncSyncClient) CloseAndRecv() (*SyncResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalyticsSyncServer is the server API for AnalyticsSync service.
// All implementations must embed UnimplementedAnalyticsSyncServer
// for forward compatibility
type AnalyticsSyncServer interface {
	Sync(AnalyticsSync_SyncServer) error
	mustEmbedUnimplementedAnalyticsSyncServer()
}

// UnimplementedAnalyticsSyncServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsSyncServer struct {
}

func (UnimplementedAnalyticsSyncServer) Sync(AnalyticsSync_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedAnalyticsSyncServer) mustEmbedUnimplementedAnalyticsSyncServer() {}

// UnsafeAnalyticsSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsSyncServer will
// result in compilation errors.
type UnsafeAnalyticsSyncServer interface {
	mustEmbedUnimplementedAnalyticsSyncServer()
}

func RegisterAnalyticsSyncServer(s grpc.ServiceRegistrar, srv AnalyticsSyncServer) {
	s.RegisterService(&AnalyticsSync_ServiceDesc, srv)
}

func _AnalyticsSync_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalyticsSyncServer).Sync(&analyticsSyncSyncServer{stream})
}

type AnalyticsSync_SyncServer interface {
	SendAndClose(*SyncResponse) error
	Recv() (*AnalyticsRecords, error)
	grpc.ServerStream
}

type analyticsSyncSyncServer struct {
	grpc.ServerStream
}

func (x *analyticsSyncSyncServer) SendAndClose(m *SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analyticsSyncSyncServer) Recv() (*AnalyticsRecords, error) {
	m := new(AnalyticsRecords)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalyticsSync_ServiceDesc is the grpc.ServiceDesc for AnalyticsSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AnalyticsSync",
	HandlerType: (*AnalyticsSyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _AnalyticsSync_Sync_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "analytics.proto",
}
